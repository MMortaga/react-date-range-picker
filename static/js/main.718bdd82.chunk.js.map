{"version":3,"sources":["../../src/utils.ts","../../src/types.ts","../../src/components/Header.tsx","../../src/components/Day.tsx","../../src/components/Month.tsx","../../src/defaults.ts","../../src/components/DefinedRanges.tsx","../../src/components/Menu.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["identity","combine","args","parseOptionalDate","parsed","parse","isValid","styles","createStyles","iconContainer","padding","icon","background","MONTHS","withStyles","date","classes","setDate","nextDisabled","prevDisabled","onClickNext","onClickPrevious","container","justify","alignItems","item","className","disabled","onClick","color","value","getMonth","onChange","event","setMonth","parseInt","MenuProps","disablePortal","key","month","idx","getYear","setYear","relativeTo","half","Math","count","Array","generateYears","year","useStyles","makeStyles","leftBorderRadius","borderRadius","rightBorderRadius","buttonContainer","display","button","height","width","buttonText","lineHeight","outlined","border","theme","dark","filled","backgroundColor","highlighted","hover","contrast","contrastText","Day","props","onMouseOver","onHover","variant","NavigationAction","WEEK_DAYS","root","weekDaysContainer","marginTop","paddingLeft","paddingRight","daysContainer","marginBottom","Month","helpers","handlers","dateRange","marker","setValue","minDate","maxDate","navState","back","forward","square","elevation","direction","day","startWeek","startOfWeek","startOfMonth","endWeek","endOfWeek","endOfMonth","days","curr","isBefore","addDays","getDaysInMonth","length","array","i","week","isStart","startDate","isSameDay","isStartOfRange","isEnd","endDate","isEndOfRange","isRangeOneDay","isRangeSameDay","isWithinRange","inDateRange","format","isToday","isSameMonth","startOfRange","endOfRange","getDate","isSameRange","first","fStart","fEnd","sStart","second","sEnd","DefinedRanges","style","maxHeight","overflow","primaryTypographyProps","fontWeight","range","rootContainer","header","headerItem","flex","textAlign","divider","borderLeft","ranges","firstMonth","setFirstMonth","secondMonth","setSecondMonth","setDateRange","canNavigateCloser","differenceInCalendarMonths","commonProps","wrap","React","MARKERS","FIRST_MONTH","SECOND_MONTH","selectedRange","setRange","defaultRanges","label","addWeeks","addMonths","defaultTheme","createMuiTheme","Symbol","DateRangePicker","today","open","initialDateRange","definedRanges","past","minDateValid","addYears","maxDateValid","newStart","max","newEnd","min","getValidatedMonths","intialFirstMonth","initialSecondMonth","hoverDay","setHoverDay","inHoverRange","isAfter","onDayClick","undefined","newRange","onDayHover","onMonthNavigate","firstNew","secondNew","palette","primary","main","DateRangePickerStory","Date","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.718bdd82.chunk.js","sourcesContent":["import {\n  startOfWeek,\n  startOfMonth,\n  endOfWeek,\n  endOfMonth,\n  isBefore,\n  addDays,\n  isSameDay,\n  isWithinRange,\n  parse,\n  isValid\n} from 'date-fns'\nimport { DateRange } from './types'\n\nexport const identity = <T>(x: T) => x\n\nexport const chunks = <T>(array: ReadonlyArray<T>, size: number): T[][] => {\n  return Array.from({ length: Math.ceil(array.length / size) }, (v, i) =>\n    array.slice(i * size, i * size + size)\n  )\n}\n\nexport const combine = (...args: any[]): string =>\n  args.filter(identity).join(' ')\n\n// Date\nexport const getDaysInMonth = (date: Date) => {\n  const startWeek = startOfWeek(startOfMonth(date))\n  const endWeek = endOfWeek(endOfMonth(date))\n  const days = []\n  for (let curr = startWeek; isBefore(curr, endWeek); ) {\n    days.push(curr)\n    curr = addDays(curr, 1)\n  }\n  return days\n}\n\nexport const isStartOfRange = ({ startDate }: DateRange, day: Date) =>\n  (startDate && isSameDay(day, startDate)) as boolean\n\nexport const isEndOfRange = ({ endDate }: DateRange, day: Date) =>\n  (endDate && isSameDay(day, endDate)) as boolean\n\nexport const inDateRange = ({ startDate, endDate }: DateRange, day: Date) =>\n  (startDate &&\n    endDate &&\n    (isWithinRange(day, startDate, endDate) ||\n      isSameDay(day, startDate) ||\n      isSameDay(day, endDate))) as boolean\n\nexport const isRangeSameDay = ({ startDate, endDate }: DateRange) => {\n  if (startDate && endDate) {\n    return isSameDay(startDate, endDate)\n  }\n  return false\n}\n\ntype Falsy = false | null | undefined | 0 | ''\n\nexport const parseOptionalDate = (\n  date: Date | string | Falsy,\n  defaultValue: Date\n) => {\n  if (date) {\n    const parsed = parse(date)\n    if (isValid(parsed)) return parsed\n  }\n  return defaultValue\n}\n","export interface DateRange {\n  startDate?: Date\n  endDate?: Date\n}\n\nexport type Setter<T> =\n  | React.Dispatch<React.SetStateAction<T>>\n  | ((value: T) => void)\n\nexport enum NavigationAction {\n  Previous = -1,\n  Next = 1\n}\n\nexport type DefinedRange = {\n  startDate: Date\n  endDate: Date\n  label: string\n}\n","import {\n  WithStyles,\n  Grid,\n  createStyles,\n  withStyles,\n  IconButton,\n  Select,\n  MenuItem\n} from '@material-ui/core'\nimport React from 'react'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport { setMonth, getMonth, setYear, getYear } from 'date-fns'\n\ninterface HeaderProps extends WithStyles<typeof styles> {\n  date: Date\n  setDate: (date: Date) => void\n  nextDisabled: boolean\n  prevDisabled: boolean\n  onClickNext: () => void\n  onClickPrevious: () => void\n}\n\nconst styles = createStyles({\n  iconContainer: {\n    padding: 5\n  },\n  icon: {\n    padding: 10,\n    '&:hover': {\n      background: 'none'\n    }\n  }\n})\n\nconst MONTHS = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'June',\n  'July',\n  'Aug',\n  'Sept',\n  'Oct',\n  'Nov',\n  'Dec'\n]\n\nconst generateYears = (relativeTo: Date, count: number) => {\n  const half = Math.floor(count / 2)\n  return Array(count)\n    .fill(0)\n    .map((y, i) => relativeTo.getFullYear() - half + i) // TODO: make part of the state\n}\n\nconst Header: React.FunctionComponent<HeaderProps> = ({\n  date,\n  classes,\n  setDate,\n  nextDisabled,\n  prevDisabled,\n  onClickNext,\n  onClickPrevious\n}) => {\n  const handleMonthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setDate(setMonth(date, parseInt(event.target.value)))\n  }\n\n  const handleYearChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setDate(setYear(date, parseInt(event.target.value)))\n  }\n\n  return (\n    <Grid container justify='space-between' alignItems='center'>\n      <Grid item className={classes.iconContainer}>\n        <IconButton\n          className={classes.icon}\n          disabled={prevDisabled}\n          onClick={onClickPrevious}\n        >\n          <ChevronLeft color={prevDisabled ? 'disabled' : 'action'} />\n        </IconButton>\n      </Grid>\n      <Grid item>\n        <Select\n          value={getMonth(date)}\n          onChange={handleMonthChange}\n          MenuProps={{ disablePortal: true }}\n        >\n          {MONTHS.map((month, idx) => (\n            <MenuItem key={month} value={idx}>\n              {month}\n            </MenuItem>\n          ))}\n        </Select>\n      </Grid>\n\n      <Grid item>\n        <Select\n          value={getYear(date)}\n          onChange={handleYearChange}\n          MenuProps={{ disablePortal: true }}\n        >\n          {generateYears(date, 30).map((year) => (\n            <MenuItem key={year} value={year}>\n              {year}\n            </MenuItem>\n          ))}\n        </Select>\n\n        {/* <Typography>{format(date, \"MMMM YYYY\")}</Typography> */}\n      </Grid>\n      <Grid item className={classes.iconContainer}>\n        <IconButton\n          className={classes.icon}\n          disabled={nextDisabled}\n          onClick={onClickNext}\n        >\n          <ChevronRight color={nextDisabled ? 'disabled' : 'action'} />\n        </IconButton>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default withStyles(styles)(Header)\n","import React from 'react'\nimport { IconButton, Typography, Theme } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { combine } from '../utils'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  leftBorderRadius: {\n    borderRadius: '50% 0 0 50%'\n  },\n  rightBorderRadius: {\n    borderRadius: '0 50% 50% 0'\n  },\n  buttonContainer: {\n    display: 'flex'\n  },\n  button: {\n    height: 36,\n    width: 36,\n    padding: 0\n  },\n  buttonText: {\n    lineHeight: 1.6\n  },\n  outlined: {\n    border: `1px solid ${theme.palette.primary.dark}`\n  },\n  filled: {\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark\n    },\n    backgroundColor: theme.palette.primary.dark\n  },\n  highlighted: {\n    backgroundColor: theme.palette.action.hover\n  },\n  contrast: {\n    color: theme.palette.primary.contrastText\n  }\n}))\n\ninterface DayProps {\n  filled?: boolean\n  outlined?: boolean\n  highlighted?: boolean\n  disabled?: boolean\n  startOfRange?: boolean\n  endOfRange?: boolean\n  onClick?: () => void\n  onHover?: () => void\n  value: number | string\n}\n\nconst Day: React.FunctionComponent<DayProps> = (props) => {\n  const classes = useStyles()\n  return (\n    <div\n      className={combine(\n        classes.buttonContainer,\n        props.startOfRange && classes.leftBorderRadius,\n        props.endOfRange && classes.rightBorderRadius,\n        !props.disabled && props.highlighted && classes.highlighted\n      )}\n    >\n      <IconButton\n        className={combine(\n          classes.button,\n          !props.disabled && props.outlined && classes.outlined,\n          !props.disabled && props.filled && classes.filled\n        )}\n        disabled={props.disabled}\n        onClick={props.onClick}\n        onMouseOver={props.onHover}\n      >\n        <Typography\n          color={!props.disabled ? 'initial' : 'textSecondary'}\n          className={combine(\n            classes.buttonText,\n            !props.disabled && props.filled && classes.contrast\n          )}\n          variant='body2'\n        >\n          {props.value}\n        </Typography>\n      </IconButton>\n    </div>\n  )\n}\n\nexport default Day\n","import * as React from 'react'\nimport { Paper, Grid, Typography, Theme } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { getDate, isSameMonth, isToday, format, isWithinRange } from 'date-fns'\nimport {\n  chunks,\n  getDaysInMonth,\n  isStartOfRange,\n  isEndOfRange,\n  inDateRange,\n  isRangeSameDay\n} from '../utils'\nimport Header from './Header'\nimport Day from './Day'\nimport { NavigationAction, DateRange } from '../types'\n\nconst WEEK_DAYS = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: 290\n  },\n  weekDaysContainer: {\n    marginTop: 10,\n    paddingLeft: 30,\n    paddingRight: 30\n  },\n  daysContainer: {\n    paddingLeft: 15,\n    paddingRight: 15,\n    marginTop: 15,\n    marginBottom: 20\n  }\n}))\n\ninterface MonthProps {\n  value: Date\n  marker: symbol\n  dateRange: DateRange\n  minDate: Date\n  maxDate: Date\n  navState: [boolean, boolean]\n  setValue: (date: Date) => void\n  helpers: {\n    inHoverRange: (day: Date) => boolean\n  }\n  handlers: {\n    onDayClick: (day: Date) => void\n    onDayHover: (day: Date) => void\n    onMonthNavigate: (marker: symbol, action: NavigationAction) => void\n  }\n}\n\nconst Month: React.FunctionComponent<MonthProps> = (props) => {\n  const {\n    helpers,\n    handlers,\n    value: date,\n    dateRange,\n    marker,\n    setValue: setDate,\n    minDate,\n    maxDate\n  } = props\n\n  const [back, forward] = props.navState\n  const classes = useStyles()\n  return (\n    <Paper square elevation={0} className={classes.root}>\n      <Grid container>\n        <Header\n          date={date}\n          setDate={setDate}\n          nextDisabled={!forward}\n          prevDisabled={!back}\n          onClickPrevious={() =>\n            handlers.onMonthNavigate(marker, NavigationAction.Previous)\n          }\n          onClickNext={() =>\n            handlers.onMonthNavigate(marker, NavigationAction.Next)\n          }\n        />\n\n        <Grid\n          item\n          container\n          direction='row'\n          justify='space-between'\n          className={classes.weekDaysContainer}\n        >\n          {WEEK_DAYS.map((day) => (\n            <Typography color='textSecondary' key={day} variant='caption'>\n              {day}\n            </Typography>\n          ))}\n        </Grid>\n\n        <Grid\n          item\n          container\n          direction='column'\n          justify='space-between'\n          className={classes.daysContainer}\n        >\n          {chunks(getDaysInMonth(date), 7).map((week, idx) => (\n            <Grid key={idx} container direction='row' justify='center'>\n              {week.map((day) => {\n                const isStart = isStartOfRange(dateRange, day)\n                const isEnd = isEndOfRange(dateRange, day)\n                const isRangeOneDay = isRangeSameDay(dateRange)\n                const highlighted =\n                  inDateRange(dateRange, day) || helpers.inHoverRange(day)\n\n                return (\n                  <Day\n                    key={format(day, 'MM-DD-YYYY')}\n                    filled={isStart || isEnd}\n                    outlined={isToday(day)}\n                    highlighted={highlighted && !isRangeOneDay}\n                    disabled={\n                      !isSameMonth(date, day) ||\n                      !isWithinRange(day, minDate, maxDate)\n                    }\n                    startOfRange={isStart && !isRangeOneDay}\n                    endOfRange={isEnd && !isRangeOneDay}\n                    onClick={() => handlers.onDayClick(day)}\n                    onHover={() => handlers.onDayHover(day)}\n                    value={getDate(day)}\n                  />\n                )\n              })}\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default Month\n","import { DefinedRange } from './types'\n\nimport {\n  addDays,\n  startOfWeek,\n  endOfWeek,\n  addWeeks,\n  startOfMonth,\n  endOfMonth,\n  addMonths\n} from 'date-fns'\n\nconst getDefaultRanges = (date: Date): DefinedRange[] => [\n  {\n    label: 'Today',\n    startDate: date,\n    endDate: date\n  },\n  {\n    label: 'Yesterday',\n    startDate: addDays(date, -1),\n    endDate: addDays(date, -1)\n  },\n  {\n    label: 'This Week',\n    startDate: startOfWeek(date),\n    endDate: endOfWeek(date)\n  },\n  {\n    label: 'Last Week',\n    startDate: startOfWeek(addWeeks(date, -1)),\n    endDate: endOfWeek(addWeeks(date, -1))\n  },\n  {\n    label: 'Last 7 Days',\n    startDate: addWeeks(date, -1),\n    endDate: date\n  },\n  {\n    label: 'This Month',\n    startDate: startOfMonth(date),\n    endDate: endOfMonth(date)\n  },\n  {\n    label: 'Last Month',\n    startDate: startOfMonth(addMonths(date, -1)),\n    endDate: endOfMonth(addMonths(date, -1))\n  }\n]\n\nexport const defaultRanges = getDefaultRanges(new Date())\n","import React from 'react'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\nimport { DefinedRange, DateRange } from '../types'\nimport { isSameDay } from 'date-fns'\n\ntype DefinedRangesProps = {\n  setRange: (range: DateRange) => void\n  selectedRange: DateRange\n  ranges: DefinedRange[]\n}\n\nconst isSameRange = (first: DateRange, second: DateRange) => {\n  const { startDate: fStart, endDate: fEnd } = first\n  const { startDate: sStart, endDate: sEnd } = second\n  if (fStart && sStart && fEnd && sEnd) {\n    return isSameDay(fStart, sStart) && isSameDay(fEnd, sEnd)\n  }\n  return false\n}\n\nconst DefinedRanges: React.FunctionComponent<DefinedRangesProps> = (props) => {\n  return (\n    <List style={{ maxHeight: 400, overflow: 'scroll' }}>\n      {props.ranges.map((range, idx) => (\n        <ListItem button key={idx} onClick={() => props.setRange(range)}>\n          <ListItemText\n            primaryTypographyProps={{\n              variant: 'body2',\n              style: {\n                fontWeight: isSameRange(range, props.selectedRange)\n                  ? 'bold'\n                  : 'normal'\n              }\n            }}\n          >\n            {range.label}\n          </ListItemText>\n        </ListItem>\n      ))}\n    </List>\n  )\n}\n\nexport default DefinedRanges\n","import React from 'react'\nimport {\n  Paper,\n  Grid,\n  Typography,\n  Divider,\n  createStyles,\n  WithStyles,\n  Theme,\n  withStyles\n} from '@material-ui/core'\nimport {\n  format,\n  differenceInCalendarMonths,\n  differenceInCalendarDays\n} from 'date-fns'\nimport ArrowRightAlt from '@material-ui/icons/ArrowRightAlt'\nimport Month from './Month'\nimport DefinedRanges from './DefinedRanges'\nimport { DateRange, DefinedRange, Setter, NavigationAction } from '../types'\nimport { MARKERS } from '..'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    rootContainer: {\n      width: 'fit-content'\n    },\n    header: {\n      padding: '20px 70px'\n    },\n    headerItem: {\n      flex: 1,\n      textAlign: 'center'\n    },\n    divider: {\n      borderLeft: `1px solid ${theme.palette.action.hover}`\n    }\n  })\n\ninterface MenuProps extends WithStyles<typeof styles> {\n  dateRange: DateRange\n  ranges: DefinedRange[]\n  minDate: Date\n  maxDate: Date\n  firstMonth: Date\n  secondMonth: Date\n  setFirstMonth: Setter<Date>\n  setSecondMonth: Setter<Date>\n  setDateRange: Setter<DateRange>\n  helpers: {\n    inHoverRange: (day: Date) => boolean\n  }\n  handlers: {\n    onDayClick: (day: Date) => void\n    onDayHover: (day: Date) => void\n    onMonthNavigate: (marker: symbol, action: NavigationAction) => void\n  }\n}\n\nconst Menu: React.FunctionComponent<MenuProps> = (props) => {\n  const {\n    classes,\n    ranges,\n    dateRange,\n    minDate,\n    maxDate,\n    firstMonth,\n    setFirstMonth,\n    secondMonth,\n    setSecondMonth,\n    setDateRange,\n    helpers,\n    handlers\n  } = props\n  const { startDate, endDate } = dateRange\n  const canNavigateCloser =\n    differenceInCalendarMonths(secondMonth, firstMonth) >= 2\n\n  const commonProps = { dateRange, minDate, maxDate, helpers, handlers }\n  return (\n    <Paper className={classes.rootContainer} elevation={5} square>\n      <Grid container direction='row' wrap='nowrap'>\n        <Grid>\n          <Grid container className={classes.header} alignItems='center'>\n            <Grid item className={classes.headerItem}>\n              <Typography variant='subtitle1'>\n                {startDate ? format(startDate, 'MMMM DD, YYYY') : 'Start Date'}\n              </Typography>\n            </Grid>\n            <Grid item className={classes.headerItem}>\n              <ArrowRightAlt color='action' />\n            </Grid>\n            <Grid item className={classes.headerItem}>\n              <Typography variant='subtitle1'>\n                {endDate ? format(endDate, 'MMMM DD, YYYY') : 'End Date'}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Divider />\n          <Grid container direction='row' justify='center' wrap='nowrap'>\n            <Month\n              {...commonProps}\n              value={firstMonth}\n              setValue={setFirstMonth}\n              navState={[true, canNavigateCloser]}\n              marker={MARKERS.FIRST_MONTH}\n            />\n            <div className={classes.divider} />\n            <Month\n              {...commonProps}\n              value={secondMonth}\n              setValue={setSecondMonth}\n              navState={[canNavigateCloser, true]}\n              marker={MARKERS.SECOND_MONTH}\n            />\n          </Grid>\n        </Grid>\n        <div className={classes.divider} />\n        <Grid>\n          <DefinedRanges\n            selectedRange={dateRange}\n            ranges={ranges}\n            setRange={setDateRange}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default withStyles(styles)(Menu)\n","import * as React from 'react'\nimport {\n  addMonths,\n  isSameDay,\n  isWithinRange,\n  isAfter,\n  isBefore,\n  isSameMonth,\n  addYears,\n  max,\n  min\n} from 'date-fns'\nimport { Theme } from '@material-ui/core'\nimport { DateRange, NavigationAction, DefinedRange } from './types'\nimport Menu from './components/Menu'\nimport { defaultRanges } from './defaults'\nimport { parseOptionalDate } from './utils'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nconst defaultTheme = createMuiTheme({})\n\ntype Marker = symbol\n\nexport const MARKERS: { [key: string]: Marker } = {\n  FIRST_MONTH: Symbol('firstMonth'),\n  SECOND_MONTH: Symbol('secondMonth')\n}\n\nconst getValidatedMonths = (range: DateRange, minDate: Date, maxDate: Date) => {\n  const { startDate, endDate } = range\n  if (startDate && endDate) {\n    const newStart = max(startDate, minDate)\n    const newEnd = min(endDate, maxDate)\n\n    return [\n      newStart,\n      isSameMonth(newStart, newEnd) ? addMonths(newStart, 1) : newEnd\n    ]\n  } else {\n    return [startDate, endDate]\n  }\n}\n\ninterface DateRangePickerProps {\n  open: boolean\n  initialDateRange?: DateRange\n  definedRanges?: DefinedRange[]\n  minDate?: Date | string\n  maxDate?: Date | string\n  onChange: (dateRange: DateRange) => void\n  past: Boolean\n  theme?: Theme\n}\n\nconst DateRangePickerImpl: React.FunctionComponent<DateRangePickerProps> = (\n  props\n) => {\n  const today = new Date()\n\n  const {\n    open,\n    onChange,\n    initialDateRange,\n    minDate,\n    maxDate,\n    definedRanges = defaultRanges,\n    past,\n    theme = defaultTheme\n  } = props\n\n  const minDateValid = parseOptionalDate(minDate, addYears(today, -10))\n  const maxDateValid = parseOptionalDate(maxDate, addYears(today, 10))\n  const [intialFirstMonth, initialSecondMonth] = getValidatedMonths(\n    initialDateRange || {},\n    minDateValid,\n    maxDateValid\n  )\n\n  // console.log(\"rendering DateRangePicker\");\n  const [dateRange, setDateRange] = React.useState<DateRange>({\n    ...initialDateRange\n  })\n  const [hoverDay, setHoverDay] = React.useState<Date>()\n  const [firstMonth, setFirstMonth] = React.useState<Date>(\n    intialFirstMonth || (past ? addMonths(today, -1) : today)\n  )\n  const [secondMonth, setSecondMonth] = React.useState<Date>(\n    initialSecondMonth || past\n      ? addMonths(today, 1) > new Date()\n        ? today\n        : addMonths(today, 1)\n      : addMonths(firstMonth, 1)\n  )\n\n  const { startDate, endDate } = dateRange\n\n  // handlers\n  const setFirstMonthValidated = (date: Date) => {\n    if (isBefore(date, secondMonth)) {\n      setFirstMonth(date)\n    }\n  }\n\n  const setSecondMonthValidated = (date: Date) => {\n    if (isAfter(date, firstMonth)) {\n      setSecondMonth(date)\n    }\n  }\n\n  const setDateRangeValidated = (range: DateRange) => {\n    let { startDate: newStart, endDate: newEnd } = range\n    if (newStart && newEnd) {\n      range.startDate = newStart = max(newStart, minDateValid)\n      range.endDate = newEnd = min(newEnd, maxDateValid)\n      setDateRange(range)\n      onChange(range)\n      setFirstMonth(newStart)\n      setSecondMonth(\n        isSameMonth(newStart, newEnd) ? addMonths(newStart, 1) : newEnd\n      )\n    }\n  }\n\n  const onDayClick = (day: Date) => {\n    if (startDate && !endDate && !isBefore(day, startDate)) {\n      const newRange = { startDate, endDate: day }\n      onChange(newRange)\n      setDateRange(newRange)\n    } else {\n      setDateRange({ startDate: day, endDate: undefined })\n    }\n    setHoverDay(day)\n  }\n\n  const onMonthNavigate = (marker: Marker, action: NavigationAction) => {\n    if (marker == MARKERS.FIRST_MONTH) {\n      const firstNew = addMonths(firstMonth, action)\n      if (isBefore(firstNew, secondMonth)) setFirstMonth(firstNew)\n    } else {\n      const secondNew = addMonths(secondMonth, action)\n      if (isBefore(firstMonth, secondNew)) setSecondMonth(secondNew)\n    }\n  }\n\n  const onDayHover = (date: Date) => {\n    if (startDate && !endDate) {\n      if (!hoverDay || !isSameDay(date, hoverDay)) {\n        setHoverDay(date)\n      }\n    }\n  }\n\n  // helpers\n  const inHoverRange = (day: Date) => {\n    return (startDate &&\n      !endDate &&\n      hoverDay &&\n      isAfter(hoverDay, startDate) &&\n      isWithinRange(day, startDate, hoverDay)) as boolean\n  }\n\n  const helpers = {\n    inHoverRange\n  }\n\n  const handlers = {\n    onDayClick,\n    onDayHover,\n    onMonthNavigate\n  }\n\n  return open ? (\n    <ThemeProvider theme={theme}>\n      <Menu\n        dateRange={dateRange}\n        minDate={minDateValid}\n        maxDate={maxDateValid}\n        ranges={definedRanges}\n        firstMonth={firstMonth}\n        secondMonth={secondMonth}\n        setFirstMonth={setFirstMonthValidated}\n        setSecondMonth={setSecondMonthValidated}\n        setDateRange={setDateRangeValidated}\n        helpers={helpers}\n        handlers={handlers}\n      />\n    </ThemeProvider>\n  ) : null\n}\n\nexport { DateRange, DefinedRange } from './types'\nexport const DateRangePicker = DateRangePickerImpl\n","import React from 'react'\n\nimport { DateRangePicker } from 'react-date-range-picker'\nimport {\n  addDays,\n  addMonths\n} from \"date-fns\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport 'react-date-range-picker/dist/index.css'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ff0000',\n      dark: '#ff0000'\n    }\n  }\n})\n\nexport default function DateRangePickerStory() {\n  const date = new Date();\n  return (\n    <ThemeProvider theme={theme}>\n      <DateRangePicker\n        theme={theme}\n        open={true}\n        definedRanges={[\n          {\n            label: 'Last 1 Day',\n            startDate: addDays(date, -1),\n            endDate: addDays(date, -1)\n          },\n          {\n            label: 'Last 3 Days',\n            startDate: addDays(date, -3),\n            endDate: addDays(date, -1)\n          },\n          {\n            label: 'Last 7 Days',\n            startDate: addDays(date, -7),\n            endDate: addDays(date, -1)\n          },\n          {\n            label: 'Last 14 Days',\n            startDate: addDays(date, -14),\n            endDate: addDays(date, -1)\n          },\n          {\n            label: 'Last 30 Days',\n            startDate: addDays(date, -30),\n            endDate: addDays(date, -1)\n          },\n          {\n            label: 'Last 90 Days',\n            startDate: addDays(date, -90),\n            endDate: addDays(date, -1)\n          },\n          {\n            label: 'Last 180 Days',\n            startDate: addDays(date, -180),\n            endDate: addDays(date, -1)\n          },\n          {\n            label: 'Last 365 Days',\n            startDate: addMonths(date, -12),\n            endDate: addDays(date, -1)\n          }\n        ]}\n        maxDate={addDays(new Date(), -1)}\n        past={true}\n        initialDateRange={{\n          startDate: addDays(new Date(), -4),\n          endDate: addDays(new Date(), -3)\n        }}\n        onChange={(dateRange) => console.log(dateRange)}\n      />\n    </ThemeProvider>\n  )\n};\n\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}